from flask import Flask, jsonify, request
from flask_cors import CORS
import psycopg2
import os
import logging

# Configure logging
logging.basicConfig(level=logging.DEBUG)

app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "http://localhost:3000"}})

def get_db_connection():
    conn = psycopg2.connect(
        host=os.getenv('DB_HOST', 'db'),
        database=os.getenv('DB_NAME', 'landscaping_scheduler'),
        user=os.getenv('DB_USER', 'lsadmin'),
        password=os.getenv('DB_PASSWORD', 'wVaxVojCbomBaQakxe2X'),
        port=os.getenv('DB_PORT', '5432')
    )
    return conn

@app.route('/jobs', methods=['GET'])
def get_jobs():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('''
            SELECT j.job_id, j.address, j.coordinates, j.duration, j.tasks, j.date, j.start_time, p.postal_code, j.validated
            FROM jobs j
            JOIN postal_codes p ON j.postal_code_id = p.postal_code_id
        ''')
        jobs = cursor.fetchall()
        cursor.close()
        conn.close()

        jobs_list = []
        for job in jobs:
            jobs_list.append({
                "job_id": job[0],
                "address": job[1],
                "coordinates": job[2],
                "duration": job[3],
                "tasks": job[4],
                "date": job[5].isoformat() if job[5] else None,
                "start_time": job[6].strftime('%H:%M:%S') if job[6] else None,
                "postal_code": job[7],
                "validated": job[8]
            })

        return jsonify(jobs_list)
    except Exception as e:
        return jsonify({"error": str(e)}), 500  # Catch and return any errors

@app.route('/jobs', methods=['POST'])
def add_job():
    try:
        new_job = request.json
        address = new_job['address']
        coordinates = new_job.get('coordinates')
        duration = new_job['duration']
        tasks = new_job.get('tasks', '')
        date = new_job.get('date')
        start_time = new_job.get('start_time')
        postal_code = new_job['postal_code_id']
        validated = new_job.get('validated', False)

        conn = get_db_connection()
        cursor = conn.cursor()

        # Fetch the postal_code_id from the postal_codes table
        cursor.execute('SELECT postal_code_id FROM postal_codes WHERE postal_code = %s', (postal_code,))
        result = cursor.fetchone()

        if not result:
            logging.error(f"Postal code '{postal_code}' not found in the database.")
            return jsonify({"error": "Postal code not found"}), 400

        postal_code_id = result[0]

        cursor.execute('''
            INSERT INTO jobs (job_id, address, coordinates, duration, tasks, date, start_time, postal_code_id, validated)
            VALUES (uuid_generate_v4(), %s, ST_GeogFromText(%s), %s, %s, %s, %s, %s, %s)
        ''', (address, coordinates, duration, tasks, date, start_time, postal_code_id, validated))
        conn.commit()
        cursor.close()
        conn.close()

        logging.info(f"Job added successfully for address '{address}' with postal code ID '{postal_code_id}'.")
        return jsonify({"message": "Job added successfully!"}), 201

    except Exception as e:
        logging.exception("An error occurred while adding the job.")
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001)

